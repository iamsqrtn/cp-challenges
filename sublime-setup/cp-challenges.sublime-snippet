<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>

/* policy based data structures */
/*
 #include<ext/pb_ds/assoc_container.hpp>
 #include<ext/pb_ds/tree_policy.hpp>
 #include<ext/pb_ds/detail/standard_policies.hpp>
*/

/* gcc optimization flags */
/*
 #pragma GCC optimize("Ofast")
 #pragma GCC optimize ("unroll-loops")
 #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
*/

/* common defines */
#define endl     "\n"
#define pie      3.14159265358979323846
#define inf      1e9+7

/* fast input output */
#define fast_io  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

/* fixed float field */
#define fix_prec cout.setf(std::ios::fixed, std::ios::floatfield); cout.precision(9);

/* vector defines */
#define pb      push_back
#define pf      push_front
#define eb      emplace_back
#define ppb     pop_back
#define ppf     pop_front

/* pair defines */
#define mp       make_pair
#define F        first
#define S        second

/* sort defines */
#define all(x)   x.begin(),x.end()
#define rall(x)  x.rbegin(),x.rend()

/* binary search - bound defines */
#define lb       lower_bound
#define ub       upper_bound

using namespace std;

/* policy based data dtructures */
/*
 using namespace __gnu_pbds;

 typedef tree <int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;
*/

typedef long long int lli;
typedef unsigned long long int ulli;
typedef vector<int> vi;
typedef vector<lli> vlli;
typedef vector<vector<int>> vvi;
typedef vector<vector<lli>> vvlli;
typedef vector<pair<int,int>> vpii;
typedef vector<pair<lli,lli>> vplli;
typedef pair<int,int> pii;
typedef pair<lli,lli> plli;
typedef map<int,int> mii;
typedef map<lli,lli> mlli;

/* constant defines */
lli const mod  = 1e9+7;
lli const modl = 1e18;

/* helper function - calculate gcd(a, b) */
lli gcd(lli a, lli b)
{
    if (b==0)
        return a;
    return gcd(b, a%b);
}

/* helper function - calculate lcm(a, b) */
lli lcm(lli a, lli b)
{
	return a/gcd(a,b)*b;
}

/* helper function - calculate fib nos F[n] = F[n-1] + F[n-2], n>=2, or n, n<=1 */
lli fib(int n)
{
    lli a,b,c,i;
    a=0,b=1;
    if(n==0)
        return a;
    for(i=2;i<=n;i++)
    {
    	c=a+b;
    	a=b;
    	b=c;
    }
    return b;
}

/* helper function - check if no is prime or not */
bool isprime(lli n)
{
	if(n<=1)
		return false;
	else if(n==2)
		return true;
	else if(n%2==0)
		return false;
	else
	{
		int i;
		for(i=3;i*i<=n;i++)
		{
			if(n%i==0)
				return false;
		}
		return true;
	}
}

/* helper function - check if no is power of 2 */
bool ispowerof2(lli a)
{
	return (a&&!(a&(a-1)));
}

/* helper function - read/write on text file
void readwrite()
{
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
} 


/* helper function - calculate seive of eratosthenes */
vector<lli>prime(100000+7,1);
void buildprime(lli n)
{
	lli i,j;
	prime[0]=prime[1]=0;
	for(i=2;i*i<=n;i++)
	{
		if(prime[i])
		{
			for(j=i*i;j<=n;j+=i)
				prime[j]=0;
		}
	}
}

/* helper function - calculate nCr recursive */
lli dpm[1005][1005];
lli comb[1005][1005];
lli ncr(lli n,lli r)
{
	if(n==r)
		return 1;
	if(r==0)
		return 1;
	if(r==1)
		return n;
	if(dpm[n][r]!=0)
		return dpm[n][r];
	return dpm[n][r] = (ncr(n-1,r)%mod+ncr(n-1,r-1)%mod)%mod;
}

/* helper function - calculate nCr iterative */
void ncrm()
{
	comb[0][0]=1;
	for(int i=1;i<1001;i++)
	{
		comb[i][0]=1;
		for(int j=1;j<=i;j++)
		{
			if(j==0 || j==i)
				comb[i][j]=1;
			else
				comb[i][j]=(comb[i-1][j]%mod+comb[i-1][j-1]%mod)%mod;
		}
	}
}

/* helper function - calculate binary exponentiation */
lli binpowm(lli a,lli b)
{
	lli res=1;
	a%=mod;
	while(b>0)
	{
		if(b&1)
			res=((res%mod)*(a%mod))%mod;
		a=((a%mod)*(a%mod))%mod;
		b>>=1;
	}
	return res%mod;
}

/* helper function - calculate factorial(n) */
lli fact(lli n)
{
	lli i,res=1;
	for(i=1;i<=n;i++)
		res=((res%mod)*(i%mod))%mod;
	return res%mod;
}

void solve()
{
	
}

int main()
{
	fast_io;
  	fix_prec;
  	//readwrite();

  	int _;
  	cin>>_;
  	while(_--)
  	{
    	solve();
    	cout<<endl;     
  	}
  	return 0;	
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cp-snippet</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
